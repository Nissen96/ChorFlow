/**
MapReduce is used to process a data set in parallel at different processes
A leader process decomposes the computation in two parts.
The first sub-problem is solved by the leader and the second delegated to another process, both by recursively applying this same delegation scheme.
When sub-problems reach a single value (x), y := map(x) is computed at the process and the result passed back to its leader.
Here, the two results are reduced to one and recursively passed back until a single result at the original leader is left.

The following is an example with four processes, running the algorithm on four values in parallel
*/

// Send second half of work to p2
p0.(3, 4) -> p2.x2;

// Process two first values at p0 and p1, collect at p0, and reduce
p0.2 -> p1.x1;
p0.y0 := map(x0);
p1.map(x1) -> p0.y1;
p0.y0 := reduce(y0, y1);

// Similar processing at x2 and x3
p2.4 -> p3.x3;
p2.y2 := map(x2);
p3.map(x3) -> p2.y3;
p2.y2 := reduce(y2, y3);

// Collect and reduce final results at p0
p2.y2 -> p0.y2;
p0.y0 := reduce(y0, y2);
0